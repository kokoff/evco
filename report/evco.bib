
@misc{ehlis_application_2000,
	title = {Application of {Genetic} {Programming} to the {Snake} {Game}},
	url = {https://www.gamedev.net/articles/programming/artificial-intelligence/application-of-genetic-programming-to-the-snake-r1175/},
	abstract = {This article covers the development and analysis of a successful function set that will allow the evolution of a genetic program that will allow the AI to attain maximal performance.},
	language = {en-US},
	urldate = {2018-01-13},
	journal = {GameDev.net},
	author = {Ehlis, Tobin},
	year = {2000},
	file = {Snapshot:/home/skokov/Zotero/storage/4HXQT7KV/application-of-genetic-programming-to-the-snake-r1175.html:text/html}
}

@inproceedings{yeh_snake_2016,
	title = {Snake game {AI}: {Movement} rating functions and evolutionary algorithm-based optimization},
	shorttitle = {Snake game {AI}},
	doi = {10.1109/TAAI.2016.7880166},
	abstract = {Snake game is a computer action game, whose goal is to control a snake to move and collect food in a map. In this paper we develop a controller based on movement rating functions considering smoothness, space, and food. Scores given by these functions are aggregated by linear weighted sum, and the snake takes the action that leads to the highest score. To find a set of good weight values, we apply an evolutionary algorithm. We examine several algorithm variants of different crossover and environmental selection operators. Experimental results show that our design method is able to generate smart controllers.},
	booktitle = {2016 {Conference} on {Technologies} and {Applications} of {Artificial} {Intelligence} ({TAAI})},
	author = {Yeh, J. F. and Su, P. H. and Huang, S. H. and Chiang, T. C.},
	month = nov,
	year = {2016},
	keywords = {Evolutionary computation, artificial intelligence, Artificial intelligence, artificial intelligence (AI), computer action game, computer games, Computers, environmental selection operators, evolutionary algorithm, evolutionary algorithm-based optimization, evolutionary computation, food, game, Games, good weight value set, linear weighted sum aggregation, movement rating functions, optimisation, Optimization, set theory, smart controller, smoothness, snake, snake game AI, space, Turning, Weapons},
	pages = {256--261},
	file = {IEEE Xplore Abstract Record:/home/skokov/Zotero/storage/GJY7ICVE/7880166.html:text/html;IEEE Xplore Full Text PDF:/home/skokov/Zotero/storage/6KWA7QLD/Yeh et al. - 2016 - Snake game AI Movement rating functions and evolu.pdf:application/pdf}
}

@book{koza_genetic_1992,
	address = {Cambridge, Mass},
	series = {Complex adaptive systems},
	title = {Genetic programming: on the programming of computers by means of natural selection},
	isbn = {978-0-262-11170-6},
	shorttitle = {Genetic programming},
	publisher = {MIT Press},
	author = {Koza, John R.},
	year = {1992},
	keywords = {Genetic programming (Computer science)},
	annote = {"A Bradford book."},
	file = {Genetic programming Complex adaptive systems - Koza J.R..pdf:/home/skokov/Zotero/storage/HT6V6ABX/Genetic programming Complex adaptive systems - Koza J.R..pdf:application/pdf}
}

@inproceedings{arcuri_practical_2011,
	title = {A practical guide for using statistical tests to assess randomized algorithms in software engineering},
	booktitle = {Software {Engineering} ({ICSE}), 2011 33rd {International} {Conference} on},
	publisher = {IEEE},
	author = {Arcuri, Andrea and Briand, Lionel},
	year = {2011},
	pages = {1--10},
	file = {PaperOnStatsForAlgorithms.pdf:/home/skokov/Zotero/storage/34I4HD3H/PaperOnStatsForAlgorithms.pdf:application/pdf}
}

@article{gupta_overview_2012,
	title = {An overview of methods maintaining diversity in genetic algorithms},
	volume = {2},
	number = {5},
	journal = {International journal of emerging technology and advanced engineering},
	author = {Gupta, Deepti and Ghafir, Shabina},
	year = {2012},
	pages = {56--60},
	file = {Lecture5DiversityReview.pdf:/home/skokov/Zotero/storage/XDMUNURY/Lecture5DiversityReview.pdf:application/pdf}
}

@article{melanie_introduction_1999,
	title = {An introduction to genetic algorithms},
	volume = {3},
	journal = {Cambridge, Massachusetts London, England, Fifth printing},
	author = {Melanie, Mitchell},
	year = {1999},
	pages = {62--75},
	file = {ebook-fuzzy-mitchell.pdf:/home/skokov/Zotero/storage/JW76MDT4/ebook-fuzzy-mitchell.pdf:application/pdf}
}

@inproceedings{gallagher_learning_2003,
	title = {Learning to play {Pac}-{Man}: an evolutionary, rule-based approach},
	volume = {4},
	shorttitle = {Learning to play {Pac}-{Man}},
	doi = {10.1109/CEC.2003.1299397},
	abstract = {Pac-Man is a well-known, real-time computer game that provides an interesting platform for research. We describe an initial approach to developing an artificial agent that replaces the human to play a simplified version of Pac-Man. The agent is specified as a simple finite state machine and ruleset. with parameters that control the probability of movement by the agent given the constraints of the maze at some instant of time. In contrast to previous approaches, the agent represents a dynamic strategy for playing Pac-Man, rather than a pre-programmed maze-solving method. The agent adaptively "learns" through the application of population-based incremental learning (PBIL) to adjust the agents' parameters. Experimental results are presented that give insight into some of the complexities of the game, as well as highlighting the limitations and difficulties of the representation of the agent.},
	booktitle = {The 2003 {Congress} on {Evolutionary} {Computation}, 2003. {CEC} '03},
	author = {Gallagher, M. and Ryan, A.},
	month = dec,
	year = {2003},
	keywords = {learning (artificial intelligence), Artificial intelligence, computer games, evolutionary computation, agent parameter, Application software, artificial agent, Australia, Automata, dynamic strategy, evolutionary approach, finite state machine, finite state machines, game complexity, Handheld computers, Home computing, Humans, Information technology, knowledge based systems, Pac-Man playing, population-based incremental learning, pre-programmed maze-solving method, probability, Real time systems, real-time computer game, real-time systems, Resumes, rule-based approach},
	pages = {2462--2469 Vol.4},
	file = {IEEE Xplore Abstract Record:/home/skokov/Zotero/storage/5Q9ZVGB9/1299397.html:text/html;IEEE Xplore Full Text PDF:/home/skokov/Zotero/storage/7IXBGAVP/Gallagher and Ryan - 2003 - Learning to play Pac-Man an evolutionary, rule-ba.pdf:application/pdf}
}

@inproceedings{shichel_gp-robocode:_2005,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {{GP}-{Robocode}: {Using} {Genetic} {Programming} to {Evolve} {Robocode} {Players}},
	isbn = {978-3-540-25436-2 978-3-540-31989-4},
	shorttitle = {{GP}-{Robocode}},
	url = {https://link.springer.com/chapter/10.1007/978-3-540-31989-4_13},
	doi = {10.1007/978-3-540-31989-4_13},
	abstract = {This paper describes the first attempt to introduce evolutionarily designed players into the international Robocode league, a simulation-based game wherein robotic tanks fight to destruction in a closed arena. Using genetic programming to evolve tank strategies for this highly active forum, we were able to rank third out of twenty-seven players in the category of HaikuBots. Our GPBot was the only entry not written by a human.},
	language = {en},
	urldate = {2018-01-21},
	booktitle = {Genetic {Programming}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Shichel, Yehonatan and Ziserman, Eran and Sipper, Moshe},
	month = mar,
	year = {2005},
	pages = {143--154},
	file = {Full Text PDF:/home/skokov/Zotero/storage/F3EJGJKZ/Shichel et al. - 2005 - GP-Robocode Using Genetic Programming to Evolve R.pdf:application/pdf;Snapshot:/home/skokov/Zotero/storage/IWBMNPQP/978-3-540-31989-4_13.html:text/html}
}

@book{bohm_evolutionary_2018,
	title = {An {Evolutionary} {Approach} to {Tetris}},
	author = {Böhm, Niko and Kókai, Gabriella and Mandl, Stefan},
	month = jan,
	year = {2018},
	file = {download.pdf:/home/skokov/Zotero/storage/NR6SHX8L/download.pdf:application/pdf}
}

@inproceedings{munoz_multi-objective_2010,
	title = {Multi-objective evolution for {Car} {Setup} {Optimization}},
	doi = {10.1109/UKCI.2010.5625607},
	abstract = {This paper describes the winner algorithm of the Car Setup Optimization Competition that took place in EvoStar (2010). The aim of this competition is to create an optimization algorithm to fine tune the parameters of a car in the The Open Racing Car Simulator (TORCS) video game. There were five participants of the competition plus the two algorithms presented by the organizers (that do not take part in the competition). Our algorithm is a Multi-Objective Evolutionary Algorithm (MOEA) based on the Non-Dominated Sorting Genetic Algorithm (NSGAII) adapted to the constraints of the competition, that focus its fitness function in the lap time. Our results are also compared with other evolutionary algorithms and with the results of the other competition participants.},
	booktitle = {2010 {UK} {Workshop} on {Computational} {Intelligence} ({UKCI})},
	author = {Muñoz, J. and Gutierrez, G. and Sanchis, A.},
	month = sep,
	year = {2010},
	keywords = {Mathematical model, Evolutionary computation, Equations, computer games, Games, Optimization, car setup optimization, EvoStar, genetic algorithms, Immune system, multi-objective evolutionary algorithm, non-dominated sorting genetic algorithm, Software algorithms, The Open Racing Car Simulator, TORCS, video game, winner algorithm},
	pages = {1--5},
	file = {IEEE Xplore Abstract Record:/home/skokov/Zotero/storage/T7CEDEEV/5625607.html:text/html;IEEE Xplore Full Text PDF:/home/skokov/Zotero/storage/XDZ57ISN/Muñoz et al. - 2010 - Multi-objective evolution for Car Setup Optimizati.pdf:application/pdf}
}

@techreport{kong_automated_nodate,
	address = {Irvine, California, USA},
	title = {Automated {Snake} {Game} {Solvers} via {AI} {Search} {Algorithms}},
	url = {http://sites.uci.edu/joana1/files/2016/12/AutomatedSnakeGameSolvers.pdf},
	abstract = {In this report, we present five different algorithms or methods for a computer to play Snake [1] automatically, including three
searching algorithms related to artificial intelligence, Best First Search, A∗ Search and improved A∗ Search with forward checking,
and two baseline methods, Random Move and Almighty Move. These methods can be the core technique in an automated Snake
Game Solver, but their performances are quite different. We conducted experiments to compare their performance and explain their
differences. Furthermore, we demonstrate how the different methods can get stuck in a dead end and anticipate possible improvements
as future work.},
	urldate = {2018-01-21},
	institution = {University of California, Irvine},
	author = {Kong, Shu and Mayans, Joan Aguilar},
	file = {AutomatedSnakeGameSolvers.pdf:/home/skokov/Zotero/storage/SYYPSXFK/AutomatedSnakeGameSolvers.pdf:application/pdf}
}

@misc{congusbongus_algorithm_nodate,
	title = {algorithm - {How} to find a safe path for an {AI} snake? - {Game} {Development} {Stack} {Exchange}},
	shorttitle = {algorithm - {How} to find a safe path for an {AI} snake?},
	url = {https://gamedev.stackexchange.com/questions/133460/how-to-find-a-safe-path-for-an-ai-snake/142067},
	urldate = {2018-01-21},
	author = {{congusbongus}},
	file = {Snapshot:/home/skokov/Zotero/storage/4SZQSJTL/142067.html:text/html}
}

@misc{noauthor_hamiltonian_2017,
	title = {Hamiltonian path},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Hamiltonian_path&oldid=814872829},
	abstract = {In the mathematical field of graph theory, a Hamiltonian path (or traceable path) is a path in an undirected or directed graph that visits each vertex exactly once. A Hamiltonian cycle (or Hamiltonian circuit) is a Hamiltonian path that is a cycle. Determining whether such paths and cycles exist in graphs is the Hamiltonian path problem, which is NP-complete.
Hamiltonian paths and cycles are named after William Rowan Hamilton who invented the icosian game, now also known as Hamilton's puzzle, which involves finding a Hamiltonian cycle in the edge graph of the dodecahedron. Hamilton solved this problem using the icosian calculus, an algebraic structure based on roots of unity with many similarities to the quaternions (also invented by Hamilton). This solution does not generalize to arbitrary graphs.
Despite being named after Hamilton, Hamiltonian cycles in polyhedra had also been studied a year earlier by Thomas Kirkman, who, in particular, gave an example of a polyhedron without Hamiltonian cycles. Even earlier, Hamiltonian cycles and paths in the knight's graph of the chessboard, the knight's tour, had been studied in the 9th century in Indian mathematics by Rudrata, and around the same time in Islamic mathematics by al-Adli ar-Rumi. In 18th century Europe, knight's tours were published by Abraham de Moivre and Leonhard Euler.},
	language = {en},
	urldate = {2018-01-21},
	journal = {Wikipedia},
	month = dec,
	year = {2017},
	note = {Page Version ID: 814872829},
	file = {Snapshot:/home/skokov/Zotero/storage/54APNFI7/index.html:text/html}
}

@misc{gregskl_snakenn:_2017,
	title = {{SnakeNN}: {Snake} {Neural} {Network} trainer using a genetic algorithm},
	copyright = {MIT},
	shorttitle = {{SnakeNN}},
	url = {https://github.com/GregSkl/SnakeNN},
	urldate = {2018-01-21},
	author = {GregSkl},
	month = jun,
	year = {2017},
	note = {original-date: 2016-04-24T21:16:31Z},
	file = {Snapshot:/home/skokov/Zotero/storage/A4RASBTE/SnakeNN.html:text/html}
}

@misc{korolev_neural_2017,
	title = {Neural {Network} to play a snake game},
	url = {https://towardsdatascience.com/today-im-going-to-talk-about-a-small-practical-example-of-using-neural-networks-training-one-to-6b2cbd6efdb3},
	abstract = {Today I’m going to talk about a small practical example of using neural networks — training one to play a snake game.},
	urldate = {2018-01-21},
	journal = {Towards Data Science},
	author = {Korolev, Slava},
	month = jul,
	year = {2017},
	file = {Snapshot:/home/skokov/Zotero/storage/GKGW6IBY/today-im-going-to-talk-about-a-small-practical-example-of-using-neural-networks-training-one-to.html:text/html}
}

@inproceedings{cole_using_2004,
	title = {Using a genetic algorithm to tune first-person shooter bots},
	volume = {1},
	doi = {10.1109/CEC.2004.1330849},
	abstract = {First-person shooter robot controllers (bots) are generally rule-based expert systems written in C/C++. As such, many of the rules are parameterized with values, which are set by the software designer and finalized at compile time. The effectiveness of parameter values is dependent on the knowledge the programmer has about the game. Furthermore, parameters are non-linearly dependent on each other. This paper presents an efficient method for using a genetic algorithm to evolve sets of parameters for bots which lead to their playing as well as bots whose parameters have been tuned by a human with expert knowledge about the game's strategy. This indicates genetic algorithms as being a potentially useful method for tuning bots.},
	booktitle = {Proceedings of the 2004 {Congress} on {Evolutionary} {Computation} ({IEEE} {Cat}. {No}.04TH8753)},
	author = {Cole, N. and Louis, S. J. and Miles, C.},
	month = jun,
	year = {2004},
	keywords = {artificial intelligence, Artificial intelligence, computer games, Weapons, genetic algorithms, bots tuning, Control systems, Counter Strike game, Counting circuits, Expert systems, first-person shooter robot controllers, game artificial intelligence, Game theory, genetic algorithm, Genetic algorithms, Logic, Programming profession, Robot control, software agents, software design},
	pages = {139--145 Vol.1},
	file = {IEEE Xplore Abstract Record:/home/skokov/Zotero/storage/DH6BGCAF/1330849.html:text/html;IEEE Xplore Full Text PDF:/home/skokov/Zotero/storage/R27IJP3U/Cole et al. - 2004 - Using a genetic algorithm to tune first-person sho.pdf:application/pdf}
}

@article{hausknecht_neuroevolution_2014,
	title = {A {Neuroevolution} {Approach} to {General} {Atari} {Game} {Playing}},
	volume = {6},
	issn = {1943-068X},
	doi = {10.1109/TCIAIG.2013.2294713},
	abstract = {This paper addresses the challenge of learning to play many different video games with little domain-specific knowledge. Specifically, it introduces a neuroevolution approach to general Atari 2600 game playing. Four neuroevolution algorithms were paired with three different state representations and evaluated on a set of 61 Atari games. The neuroevolution agents represent different points along the spectrum of algorithmic sophistication - including weight evolution on topologically fixed neural networks (conventional neuroevolution), covariance matrix adaptation evolution strategy (CMA-ES), neuroevolution of augmenting topologies (NEAT), and indirect network encoding (HyperNEAT). State representations include an object representation of the game screen, the raw pixels of the game screen, and seeded noise (a comparative baseline). Results indicate that direct-encoding methods work best on compact state representations while indirect-encoding methods (i.e., HyperNEAT) allow scaling to higher dimensional representations (i.e., the raw game screen). Previous approaches based on temporal-difference (TD) learning had trouble dealing with the large state spaces and sparse reward gradients often found in Atari games. Neuroevolution ameliorates these problems and evolved policies achieve state-of-the-art results, even surpassing human high scores on three games. These results suggest that neuroevolution is a promising approach to general video game playing (GVGP).},
	number = {4},
	journal = {IEEE Transactions on Computational Intelligence and AI in Games},
	author = {Hausknecht, M. and Lehman, J. and Miikkulainen, R. and Stone, P.},
	month = dec,
	year = {2014},
	keywords = {neural nets, neural networks, learning (artificial intelligence), Artificial neural networks, computer games, evolutionary computation, Games, genetic algorithms, Algorithm design and analysis, algorithmic sophistication, Algorithms, artificial neural networks, CMA-ES, compact state representation, conventional neuroevolution, covariance matrices, covariance matrix adaptation evolution strategy, domain-specific knowledge, Encoding, general Atari 2600 game playing, general video game playing, GVGP, higher dimensional representation, HyperNEAT, indirect network encoding, indirect-encoding method, multi-agent systems, Network topology, neuroevolution agents, neuroevolution algorithm, neuroevolution approach, neuroevolution of augmenting topology, object representation, raw game screen, sparse reward gradient, state representations, state spaces, TD learning, temporal-difference learning, Topology, video games, weight evolution},
	pages = {355--366},
	file = {IEEE Xplore Abstract Record:/home/skokov/Zotero/storage/3W7568R5/6756960.html:text/html;IEEE Xplore Full Text PDF:/home/skokov/Zotero/storage/XZDRUVD3/Hausknecht et al. - 2014 - A Neuroevolution Approach to General Atari Game Pl.pdf:application/pdf}
}

@misc{noauthor_artificial_nodate,
	title = {Artificial {Ant} {Problem} — {DEAP} 1.2.2 documentation},
	url = {http://deap.readthedocs.io/en/master/examples/gp_ant.html},
	urldate = {2018-01-21},
	file = {Artificial Ant Problem — DEAP 1.2.2 documentation:/home/skokov/Zotero/storage/IBFN7Z7W/gp_ant.html:text/html}
}

@article{derrac_practical_2011,
	title = {A practical tutorial on the use of nonparametric statistical tests as a methodology for comparing evolutionary and swarm intelligence algorithms},
	volume = {1},
	issn = {2210-6502},
	url = {http://www.sciencedirect.com/science/article/pii/S2210650211000034},
	doi = {10.1016/j.swevo.2011.02.002},
	abstract = {The interest in nonparametric statistical analysis has grown recently in the field of computational intelligence. In many experimental studies, the lack of the required properties for a proper application of parametric procedures–independence, normality, and homoscedasticity–yields to nonparametric ones the task of performing a rigorous comparison among algorithms. In this paper, we will discuss the basics and give a survey of a complete set of nonparametric procedures developed to perform both pairwise and multiple comparisons, for multi-problem analysis. The test problems of the CEC’2005 special session on real parameter optimization will help to illustrate the use of the tests throughout this tutorial, analyzing the results of a set of well-known evolutionary and swarm intelligence algorithms. This tutorial is concluded with a compilation of considerations and recommendations, which will guide practitioners when using these tests to contrast their experimental results.},
	number = {1},
	urldate = {2018-01-22},
	journal = {Swarm and Evolutionary Computation},
	author = {Derrac, Joaquín and García, Salvador and Molina, Daniel and Herrera, Francisco},
	month = mar,
	year = {2011},
	keywords = {Evolutionary algorithms, Multiple comparisons, Nonparametric statistics, Pairwise comparisons, Statistical analysis, Swarm intelligence algorithms},
	pages = {3--18},
	file = {ScienceDirect Full Text PDF:/home/skokov/Zotero/storage/AZTQAAWJ/Derrac et al. - 2011 - A practical tutorial on the use of nonparametric s.pdf:application/pdf;ScienceDirect Snapshot:/home/skokov/Zotero/storage/BMYN98EE/S2210650211000034.html:text/html}
}

@inproceedings{christensen_solving_2007,
	title = {Solving the artificial ant on the {Santa} {Fe} trail problem in 20,696 fitness evaluations},
	booktitle = {Proceedings of the 9th annual conference on {Genetic} and evolutionary computation},
	publisher = {ACM},
	author = {Christensen, Steffen and Oppacher, Franz},
	year = {2007},
	pages = {1574--1579},
	file = {p1574.pdf:/home/skokov/Zotero/storage/JDU5QV9I/p1574.pdf:application/pdf}
}

@article{langdon_why_1998,
	title = {Why ants are hard},
	author = {Langdon, William B. and Poli, Riccardo},
	year = {1998},
	file = {26c83ad4c4808e01ddc7f7148ea1c4c4c1ad.pdf:/home/skokov/Zotero/storage/8SARUVJP/26c83ad4c4808e01ddc7f7148ea1c4c4c1ad.pdf:application/pdf}
}